name: Deploy Images to ECR

on:
  workflow_run:
    workflows: ["Terraform Deployment"]
    types:
      - completed  # Triggers when Terraform code execution completed

jobs:
  build:
    name: Build Image
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Check out code
        uses: actions/checkout@v4

      # Step 2: Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: us-east-1
      
      # Step 3: Build and Push SQL Image
      - name: Build and Push SQL Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: clo835-assignment1-sql
          IMAGE_TAG: v0.1
        run: |
          ls -ltra
          # Docker build command for SQL
          docker build . -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile_mysql
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # Run SQL Container
          docker run --name my_db -d -e MYSQL_ROOT_PASSWORD=pw $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # Step 3: Build Flask App
      - name: Build Flask App
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: clo835-assignment1-flask
          IMAGE_TAG: v0.1
        run: |
          ls -ltra
          # Docker build command for Flask App
          docker build . -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile
      
      # Step 3: Test and Push Flask App
      - name: Test Flask App
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: clo835-assignment1-flask
          IMAGE_TAG: v0.1
        run: |
          # Export Env Variables
          export DBHOST=172.17.0.2; export DBPORT=3306; export DBUSER=root; export DATABASE=employees; export DBPWD=pw
          # Run Flask Container
          docker run --name flask_app -d -p 80:8080 -e DBHOST=$DBHOST -e DBPORT=$DBPORT -e DBUSER=$DBUSER -e DBPWD=$DBPWD -e APP_COLOR="blue" $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          # Testing the containers
          docker ps
          echo "Pause for 10 seconds to let container start"
          sleep 10
          if ! curl -s localhost | grep -q "Add Employee Information"; then
            echo "Error: 'Add Employee Information' not found in response."
            exit 1
          fi
          echo "Flask App Tested succesfully.. Pushing to ECR"
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG